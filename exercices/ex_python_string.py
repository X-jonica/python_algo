# exercice python string 

def saut_de_ligne():
    print('\n')

#! âœ… 1. Multiline Strings

'''
Utilisation des triples guillemets """ """ pour Ã©crire plusieurs lignes.

ğŸ§ª Exercices :
CrÃ©e une variable bio contenant une prÃ©sentation personnelle sur trois lignes, puis affiche-la.

Stocke dans une variable citation une citation cÃ©lÃ¨bre sur plusieurs lignes, puis affiche-la.

CrÃ©e une variable adresse qui contient ton adresse complÃ¨te (nom, rue, ville) sur plusieurs lignes, et affiche-la.

'''
bio = """Bonjour je suis jonica,
un developpeur web et mobile,
ouvert pour les offre de stage/CDI/CDD"""
print(bio)

saut_de_ligne()

citation = '''"qui semme le vent , recolte la tempete",
"on a rien sans rien",
"l'amour rends aveugle" '''
print(citation)

saut_de_ligne()

adresse = """nom : HENINTSOA Hasimanitriniaina Jonica, 
rue: Amontana LALAZANA , 
ville: FIANARANTSOA Madagascar"""
print(adresse)


#! âœ… 2. Strings are Arrays
print("\n--- Exercice 2 ---")
"""
On peut accÃ©der Ã  un caractÃ¨re avec un index : chaine[0], chaine[3]...

ğŸ§ª Exercices :
Affiche le premier, le cinquiÃ¨me et le dernier caractÃ¨re de la chaÃ®ne "Python est puissant".

Stocke la chaÃ®ne "Programmation" dans une variable et affiche le caractÃ¨re Ã  la position 4.

CrÃ©e une variable mot contenant "ordinateur" et affiche les caractÃ¨res aux positions 1, 3 et 6.
"""
text = "Python est puissant"

print(text[0], text[4], text[-1])

saut_de_ligne()

var = "Programmation"
print(var[3])

saut_de_ligne()

word = "ordinateur" 
print(word[0], word[2], word[5])


#! âœ… 3. Looping Through a String
print("\n--- Exercice 3 ---")

"""
En thÃ©orie, on utilise une boucle, mais ici on va juste manuellement afficher plusieurs caractÃ¨res pour comprendre la structure.

ğŸ§ª Exercices :
Stocke "banane" dans une variable, puis affiche un par un les caractÃ¨res "b", "a", "n" sans boucle.

Ã‰cris "data" dans une variable et affiche les 4 caractÃ¨res sur 4 lignes sÃ©parÃ©es.

Affiche chaque lettre de "fruit" en appelant chaque index individuellement ([0], [1], etc.).
"""

fruit = "banane" 
for x in fruit:
    print('"{}"'.format(x))

saut_de_ligne()

data = "data"
for x in data:
    print(x)

saut_de_ligne()

y = "fruit"
print(y[0])
print(y[1])
print(y[2])
print(y[3])
print(y[4])


#! âœ… 4. String Length
print("\n--- Exercice 4 ---")
"""
Utilisation de len() pour obtenir la longueur dâ€™une chaÃ®ne.

ğŸ§ª Exercices :
Calcule et affiche la longueur de "informatique".

CrÃ©e une variable phrase = "Python est cool" et affiche sa longueur.

Stocke "1234567890" dans une variable et affiche le nombre de caractÃ¨res.
"""

print(len("informatique"))

saut_de_ligne()

phrase = "Python est cool"
print(len(phrase))

saut_de_ligne()

nombres = "1234567890" 
print(len(nombres))


#! âœ… 5. Check String (keyword in)
print("\n--- Exercice 5 ---")
"""
VÃ©rifier si un mot ou un caractÃ¨re existe dans une chaÃ®ne.

ğŸ§ª Exercices :
VÃ©rifie si "cool" est dans "Python est cool".

VÃ©rifie si "x" est prÃ©sent dans "exemple".

CrÃ©e une variable message = "Bienvenue sur la plateforme" et vÃ©rifie si "plateforme" s'y trouve.
"""
phrase_1 = "Python est cool"
if ("cool" in phrase_1):
    print("OUI, cool est dans '{}' ".format(phrase_1))

saut_de_ligne()

exemple = "exemple"
if ("x" in exemple):
    print('OUI, x est dans "exemple" ')

saut_de_ligne()

welcome = "Bienvenue sur la plateforme"
print("plateforme" in welcome)


#! âœ… 6. Check if NOT in String (keyword not in)
print("\n--- Exercice 6 ---")
"""
VÃ©rifier si un mot ou un caractÃ¨re n'existe pas dans une chaÃ®ne.

ğŸ§ª Exercices :
VÃ©rifie si "voiture" nâ€™est pas dans "Je vais Ã  lâ€™Ã©cole".

CrÃ©e une variable text = "formation dÃ©veloppeur" et vÃ©rifie si "design" nâ€™est pas dans text.

VÃ©rifie si "@" nâ€™est pas dans "exemple.com".
"""

print("voiture" not in "Je vais Ã  lâ€™Ã©cole")

saut_de_ligne()

txt = "formation dÃ©veloppeur"
print("design" not in txt)

saut_de_ligne()

print("@" not in "exemple.com")

